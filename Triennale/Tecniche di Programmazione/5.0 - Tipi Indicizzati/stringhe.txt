Una stringa è un array di caratteri che termina con il carattere speciale di fine stringa '\0'.
Per memorizzare N caratteri serve un array di dimensione N+1. Una stringa vuota contiene solo '\0'.
Segue che non è un tipo primitivo, ma un char*. Nella libreria <string.h> sono definite funzioni utili a
manipolare le stringhe, come strlen(s), che restituisce il numero di caratteri (escluso '\0') contenuti
nella stringa s. Le stringhe si indicano tra DOPPI APICI. Quando C vede i doppi apici, alloca un array
statico di tipo const char* delle dimensioni della stringa più uno ('\0'). Le stringhe create in stack
sono di tipo const char*, quelle in heap char*. Per rappresentare la stringa
con printf() devo usare %s, altrimenti uso la funzione puts() (cha va anche a capo).

	char c[5] = "ciao";			EQUIVALENTE A 		char c[5] = {’c’, ’i’, ’a’, ’o’, ’\0’};

La funzione scanf termina la lettura di stringa quando legge uno spazio, mentre è più comodo usare la
funzione gets() che termina col comando di andare a capo.
Nella libreria sopracitata ci sono un sacco di belle funzioni (vedere pag. 167-170 delle dispense).

Notare che l'I/O può essere soggetto a differenze tra diversi SO, per cui lo stesso codice può
produrre o meno errori a seconda della macchina su cui lo si esegue.

La funzione main può essere dichiarata anche con una segnatura a due argomenti:

	int main(int argc, char **argv)
	
Gli argomenti della funzione main indicano un array di stringhe argv (rappresentate mediante array di
caratteri) e il numero di elementi dell’array argc. Il primo argomento, cioè argv[0] corrisponde al nome
del file eseguibile. Gli argomenti di un programma vengono forniti in input da linea di comando al momento
della sua invocazione. Notare che argc e **argv vengono creati fuori dal main.

Per concatenare le stringhe usa solo la funzione sprintf (a meno che non vuoi farti del male).

	sprintf(newname, "%s%s%s", "first", m1->name, "' and '", m2->name, "'");

	// sprintf(var_risultato, "formati", variabili contenenti le stringhe)

Notare che possono essere sia const char* (come "ciao") sia char*. 
